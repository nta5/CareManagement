@model CareManagement.Models.SCHDL.Schedule

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Schedule</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="ServiceId" class="control-label">
                    @Html.DisplayNameFor(model => model.Service)
                </label>
                <select id="ServiceId" asp-for="ServiceId" class="form-control" asp-items="ViewBag.ServiceId"></select>
            </div>
            <div class="form-group">
                <label asp-for="StartTime" class="control-label">
                    @Html.DisplayNameFor(model => model.StartTime)
                </label>
                <input id="StartTime" asp-for="StartTime" class="form-control" />
                <span asp-validation-for="StartTime" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="EndTime" class="control-label">
                    @Html.DisplayNameFor(model => model.EndTime)
                </label>
                <input id="EndTime" asp-for="EndTime" class="form-control" />
                <span asp-validation-for="EndTime" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input repeat-check" asp-for="IsRepeating" />
                    @Html.DisplayNameFor(model => model.IsRepeating)
                </label>
            </div>
            <div class="form-group repeat-fields" hidden>
                <label asp-for="RepeatStartDate" class="control-label">
                    @Html.DisplayNameFor(model => model.RepeatStartDate)
                </label>
                <input asp-for="RepeatStartDate" class="form-control" />
                <span asp-validation-for="RepeatStartDate" class="text-danger"></span>
            </div>
            <div class="form-group repeat-fields" hidden>
                <label asp-for="RepeatEndDate" class="control-label">
                    @Html.DisplayNameFor(model => model.RepeatEndDate)
                </label>
                <input asp-for="RepeatEndDate" class="form-control" />
                <span asp-validation-for="RepeatEndDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="RenterId" class="control-label">
                    @Html.DisplayNameFor(model => model.Renter)
                </label>
                <select asp-for="RenterId" class="form-control" asp-items="ViewBag.RenterId">
                </select>
            </div>
            <div class="form-group">
                <label asp-for="ShiftID" class="control-label">Employee</label>
                <select asp-for="ShiftID" class="form-control" asp-items="ViewBag.ShiftID"></select>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        //hide/unhide repeat hours
        $(document).ready(function () {
            $('.repeat-check').change(function () {
                if (this.checked) {
                    $('.repeat-fields').removeAttr('hidden');
                } else {
                    $('.repeat-fields').attr('hidden', true);
                }
            });
        });

        //autocomplete endtime
        $(document).ready(function () {
            const serviceId = $("#ServiceId");
            const startTime = $("#StartTime");
            const endTime = $("#EndTime");

            // A function to fetch the service hours based on the selected service id
            async function getServiceHours(serviceId) {
                console.log("getSerivceHours");
                const response = await fetch(`/api/services/${serviceId}`);
                if (response.ok) {
                    const service = await response.json();
                    console.log(service.hours);
                    return service.hours;
                } else {
                    return null;
                }
            }

            // A function to update the end time based on the selected service id and start time
            async function updateEndTime() {
                console.log("updateEndtime");
                const selectedServiceId = serviceId.val();
                const startDateTime = startTime.val();

                if (selectedServiceId && startDateTime) {
                    const serviceHours = await getServiceHours(selectedServiceId);
                    if (serviceHours !== null) {
                        const startMoment = new Date(startDateTime);
                        startMoment.setHours(startMoment.getHours() + serviceHours - 7);
                        endTime.val(startMoment.toISOString().slice(0, 19));
                    }
                }
            }

            // Attach event listeners to the ServiceId and StartTime inputs
            serviceId.on("change", updateEndTime);
            startTime.on("change", updateEndTime);
        });
    </script>
}
